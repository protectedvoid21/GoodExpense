// <auto-generated />
using System;
using GoodExpense.Expenses.Application;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoodExpense.Expenses.Application.Migrations
{
    [DbContext(typeof(ExpenseDbContext))]
    [Migration("20250428202318_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoodExpense.Expenses.Domain.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_expenses");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("GoodExpense.Expenses.Domain.Models.ExpenseUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("integer")
                        .HasColumnName("expense_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.HasKey("UserId", "ExpenseId")
                        .HasName("pk_expense_users");

                    b.HasIndex("ExpenseId")
                        .HasDatabaseName("ix_expense_users_expense_id");

                    b.ToTable("expense_users", (string)null);
                });

            modelBuilder.Entity("GoodExpense.Expenses.Domain.Models.ExpenseUser", b =>
                {
                    b.HasOne("GoodExpense.Expenses.Domain.Models.Expense", "Expense")
                        .WithMany("ExpenseUsers")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expense_users_expenses_expense_id");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("GoodExpense.Expenses.Domain.Models.Expense", b =>
                {
                    b.Navigation("ExpenseUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
